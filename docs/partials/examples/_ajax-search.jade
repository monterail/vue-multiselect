h2.typo__h2#ajax Asynchronous dropdown
p.typo__p
  | Changing the search query emits the <kbd><code>@search-change</code></kbd> event,
  | passing the search query as 1st param and the id as second.
p.typo__p
  | To show loading indicator (spinner) please set the <kbd>:loading</kbd> prop to true.
.grid__row
  .grid__column.grid__unit--md-5
    label.typo__label Async multiselect
    multiselect(
      :options="countries",
      :selected.sync="selectedCountries",
      :multiple="multiple",
      :local-search="false",
      :clear-on-select="false",
      :close-on-select="false",
      :loading="isLoading",
      id="ajax",
      @search-change="asyncFind",
      @update="asyncUpdate",
      label="name"
      key="code"
      placeholder="Type to search"
    )
      span(slot="noResult").
        Oops! No elements found. Consider changing the search query.
    pre.language-json
      code.
        {{ selectedCountries | json }}

  .grid__column.grid__unit--md-7
    label.typo__label Code sample
    pre.language-jade
      code.
        multiselect(
          :options="countries",
          :selected.sync="selectedCountries",
          :multiple="multiple",
          :local-search="false",
          :clear-on-select="false",
          :close-on-select="false",
          :loading="isLoading",
          id="ajax",
          @search-change="asyncFind",
          @update="asyncUpdate",
          label="name"
          key="code"
          placeholder="Type to search"
        )
          span(slot="noResult").
            Oops! No elements found. Consider changing the search query.

    pre.language-javascript
      code.
        asyncFind (query) {
          if (query.length === 0) {
            this.countries = []
          } else {
            this.isLoading = true
            setTimeout(() => {
              this.countries = countries.filter((element, index, array) => {
                return element.name.toLowerCase().includes(query.toLowerCase())
              })
              this.isLoading = false
            }, 1000)
          }
        },
        asyncUpdate (newVal) {
          console.log('@update: ', newVal)
        }
